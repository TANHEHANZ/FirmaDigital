generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String   @db.VarChar(150)
  ci             String   @unique @db.VarChar(10) // inicio de secion por ci 
  password       String
  fecha_creacion DateTime @default(now())
  tipo_user      TypeUser
  estado_user    Status   @default(ACTIVO)
  idRol          String
  unidad         String
  institucion    String
  cargo          String
  refresh_token  String?
  rol            Rol      @relation(fields: [idRol], references: [id])
  Firmar         Firmar[]
  Token          Token[]
}

enum Status {
  ACTIVO
  ELIMINADO
  EDITADO
  DESHABILITADO
}

enum TypeUser {
  Juridica
  Natural
}

model Token {
  id                    String       @id @default(cuid())
  cantidad_certificados Int
  cantidad_priv_key     Int
  alias                 String       @db.VarChar(100)
  tipo_token            String       @db.VarChar(100) //si es privado o que tipo de clave
  token_id              String
  validate_certificado  Boolean // si tiene podremos registrar el certificado 
  id_certificado        String?
  Certificado           Certificado? @relation(fields: [id_certificado], references: [id])
  id_user_create        String
  User                  User         @relation(fields: [id_user_create], references: [id])
  estado_token          Status       @default(ACTIVO)
}

model Certificado {
  id                   String             @id @default(cuid())
  tipo_certificado     String
  id_certificado_token String
  id_emisor            String
  Emisor               EmisorCertificado  @relation(fields: [id_emisor], references: [id])
  id_titular           String
  titular              TitularCertificado @relation(fields: [id_titular], references: [id])
  desde                DateTime
  hasta                DateTime
  Token                Token[]
}

model EmisorCertificado {
  id          String        @id @default(cuid())
  entidad     String
  Certificado Certificado[]
}

model TitularCertificado {
  id          String        @id @default(cuid())
  ci          String
  descripcion String?
  email       String?
  nombre      String?
  Certificado Certificado[]
}

model Documento {
  id                 String          @id @default(cuid())
  nombre             String          @db.VarChar(255)
  tipo_documento     String          @db.VarChar(500)
  documento_blob     String          @db.Text
  estado             EstadoDocumento @default(ACTIVO)
  fecha_creacion     DateTime        @default(now())
  id_historial       String? // aca podemos registrar el id al documento que se editara 
  fecha_modificacion DateTime?
  fecha_eliminacion  DateTime?
  Firmar             Firmar[]
}

enum EstadoDocumento {
  ACTIVO // Documento disponible y en uso
  ARCHIVADO // Documento sin cambios, pero almacenado
  MODIFICADO // Documento con cambios en datos generales
  REMPLAZADO // Nueva versión, mantiene relación con el anterior
  ELIMINADO // Eliminado de forma lógica
}

model Firmar {
  id          String    @id @default(cuid())
  fecha       DateTime  @default(now())
  idUser      String
  idDocumento String
  User        User      @relation(fields: [idUser], references: [id])
  Documento   Documento @relation(fields: [idDocumento], references: [id])
}

model Rol {
  id         String @id @default(cuid())
  tipo       String @unique @db.VarChar(100)
  estado_rol Status @default(ACTIVO)
  User       User[]
}
